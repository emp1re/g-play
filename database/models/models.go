// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package models

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type KeyType string

const (
	KeyTypeString KeyType = "string"
	KeyTypePlural KeyType = "plural"
)

func (e *KeyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = KeyType(s)
	case string:
		*e = KeyType(s)
	default:
		return fmt.Errorf("unsupported scan type for KeyType: %T", src)
	}
	return nil
}

type NullKeyType struct {
	KeyType KeyType
	Valid   bool // Valid is true if KeyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKeyType) Scan(value interface{}) error {
	if value == nil {
		ns.KeyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.KeyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKeyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.KeyType), nil
}

func (e KeyType) Valid() bool {
	switch e {
	case KeyTypeString,
		KeyTypePlural:
		return true
	}
	return false
}

func AllKeyTypeValues() []KeyType {
	return []KeyType{
		KeyTypeString,
		KeyTypePlural,
	}
}

type ValueStatus string

const (
	ValueStatusDraft    ValueStatus = "draft"
	ValueStatusError    ValueStatus = "error"
	ValueStatusComplete ValueStatus = "complete"
)

func (e *ValueStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ValueStatus(s)
	case string:
		*e = ValueStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ValueStatus: %T", src)
	}
	return nil
}

type NullValueStatus struct {
	ValueStatus ValueStatus
	Valid       bool // Valid is true if ValueStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullValueStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ValueStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ValueStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullValueStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ValueStatus), nil
}

func (e ValueStatus) Valid() bool {
	switch e {
	case ValueStatusDraft,
		ValueStatusError,
		ValueStatusComplete:
		return true
	}
	return false
}

func AllValueStatusValues() []ValueStatus {
	return []ValueStatus{
		ValueStatusDraft,
		ValueStatusError,
		ValueStatusComplete,
	}
}

type ApiKeys struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	ExpiresAt pgtype.Timestamptz
	ProjectID int64
	UserID    int64
	Value     string
}

type Backup struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamptz
	ContentType string
	Filename    string
	ProjectID   int64
	UserID      int64
	URL         string
	Slug        string
	Provider    string
}

type Comment struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	KeyID     int64
	ValueID   *int64
	UserID    int64
	Message   string
}

type Key struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	ProjectID int64
	Name      string
	KeyType   KeyType
}

type Locale struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	ProjectID int64
	Name      string
	Lang      string
	Country   string
	Code      string
}

type Media struct {
	ID           int64
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
	ContentType  string
	Filename     string
	ProjectID    int64
	UserID       int64
	URL          string
	OriginalName string
	Slug         string
	Title        string
	Description  string
	KeyIDs       []int64
	Provider     string
}

type Project struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamptz
	Name        string
	Description string
}

type ProjectUser struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	ProjectID int64
	UserID    int64
}

type Upload struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamptz
	ContentType string
	Filename    string
	ProjectID   int64
	UserID      int64
	URL         string
	Slug        string
	Provider    string
}

type User struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	Email     string
	Password  string
	FirstName string
	LastName  string
}

type Value struct {
	ID          int64
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamptz
	ProjectID   int64
	KeyID       int64
	LocaleID    int64
	LocaleCode  string
	Value       ValueWithPlurals
	HasComments bool
	Status      ValueStatus
}

type ValueVersion struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	ValueID   int64
	CreatorID int64
	Value     ValueWithPlurals
}
