package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/emp1re/g-play/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.AddUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input *model.AddProject) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// CreateLocale is the resolver for the createLocale field.
func (r *mutationResolver) CreateLocale(ctx context.Context, input *model.AddLocale) (*model.Locale, error) {
	panic(fmt.Errorf("not implemented: CreateLocale - createLocale"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// Locales is the resolver for the locales field.
func (r *queryResolver) Locales(ctx context.Context) ([]*model.Locale, error) {
	panic(fmt.Errorf("not implemented: Locales - locales"))
}

// Locale is the resolver for the locale field.
func (r *queryResolver) Locale(ctx context.Context, id string) (*model.Locale, error) {
	panic(fmt.Errorf("not implemented: Locale - locale"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *LocaleResolver) LangName(ctx context.Context, obj *model.Locale, data string) error {
	panic(fmt.Errorf("not implemented: LangName - langName"))
}
func (r *LocaleResolver) LangCode(ctx context.Context, obj *model.Locale, data string) error {
	panic(fmt.Errorf("not implemented: LangCode - langCode"))
}
func (r *LocaleResolver) CountryName(ctx context.Context, obj *model.Locale, data string) error {
	panic(fmt.Errorf("not implemented: CountryName - countryName"))
}
func (r *LocaleResolver) CountryCode(ctx context.Context, obj *model.Locale, data string) error {
	panic(fmt.Errorf("not implemented: CountryCode - countryCode"))
}
func (r *UserResolver) Password(ctx context.Context, obj *model.User, data string) error {
	panic(fmt.Errorf("not implemented: Password - password"))
}
func (r *Resolver) Locale() LocaleResolver { return LocaleResolver{r} }
func (r *Resolver) User() UserResolver     { return UserResolver{r} }

type LocaleResolver struct{ *Resolver }
type UserResolver struct{ *Resolver }
