# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Time

directive @goField(
    name: String
    resolver: String
    ) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN
  USER
}

type AuthToken {
  accessToken: String!
  expiredAt: Time!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
}

type Project {
  id: Int!
  name: String!
  description: String!
  locales: [Locale!]!
}

type Locale {
  id: Int!
  name: String!
  code: String!
}

type LocaleOps{
  updateLocale(id: Int!, langName: String, langCode: String, countryName: String, countryCode: String): Locale!
  deleteLocale(id: Int!): Boolean!
}


type Query {
  getUser(email: String!): User @hasRole(role: ADMIN)
  projectsById(id:Int!): [Project!]! @hasRole(role: ADMIN)
  project(id: Int!): [Project!]! @hasRole(role: ADMIN)
  locales: [Locale!]! @hasRole(role: ADMIN)
  locale(id: Int!): Locale @hasRole(role: ADMIN)
}

input AddLocale{
  userID: Int!
  projectID: Int!
  locale: Newlocale!
}

input Newlocale{
  langName: String!
  langCode: String!
  countryName: String!
  countryCode: String!
}

input AddProject{
  userID: Int!
  name: String!
  description: String!
  locales: [Newlocale!]!
}
input UpdateProject{
  id : Int!
  name: String
  description: String
}
input DeleteProject{
  id: Int!
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  confirmPassword: String!
}

input AuthInput {
  email: String!
  password: String!
}

type Mutation {
  register(input: RegisterInput!): AuthResponse!
  login(input: AuthInput!): AuthResponse!

  createProject(input:AddProject): Project!
  updateProject(input: UpdateProject!): Project!
  deleteProject(id: Int!): Boolean! @hasRole(role: ADMIN)

  createLocale(input:AddLocale): Locale!
}


type CustomMutationResolver{
  createLocale(input:AddLocale): Locale!
}
