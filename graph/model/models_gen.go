// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AddLocale struct {
	UserID    int64      `json:"userID"`
	ProjectID int64      `json:"projectID"`
	Locale    *Newlocale `json:"locale"`
}

type AddProject struct {
	UserID      int64        `json:"userID"`
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Locales     []*Newlocale `json:"locales"`
}

type AuthInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AuthResponse struct {
	AuthToken *AuthToken `json:"authToken"`
	User      *User      `json:"user"`
}

type AuthToken struct {
	AccessToken string    `json:"accessToken"`
	ExpiredAt   time.Time `json:"expiredAt"`
}

type CustomMutationResolver struct {
	CreateLocale *Locale `json:"createLocale"`
}

type DeleteProject struct {
	ID int64 `json:"id"`
}

type Locale struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Code string `json:"code"`
}

type LocaleOps struct {
	UpdateLocale *Locale `json:"updateLocale"`
	DeleteLocale bool    `json:"deleteLocale"`
}

type Mutation struct {
}

type Newlocale struct {
	LangName    string `json:"langName"`
	LangCode    string `json:"langCode"`
	CountryName string `json:"countryName"`
	CountryCode string `json:"countryCode"`
}

type Project struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Locales     []*Locale `json:"locales"`
}

type Query struct {
}

type RegisterInput struct {
	FirstName       string `json:"firstName"`
	LastName        string `json:"lastName"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
}

type UpdateProject struct {
	ID          int64   `json:"id"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type User struct {
	ID        int64  `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
